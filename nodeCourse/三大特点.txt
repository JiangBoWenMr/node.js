所谓的特点，就是Node.js是如何解决服务器高性能瓶颈问题的。
一、单线程
	  Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个线程。
	当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序宏观上也是并行的。

二、非阻塞I/O   non-blocking I/O 
	例如，当在访问数据库取得数据的时候，需要一段时间。在传统的单线程处理机制中，在执行了访问数据库代码之后，
整个线程都将暂停下来，等待数据库返回结果，才能执行后面的代码。也就是说，I/O阻塞了代码的执行，极大地降低了
程序的执行效率。
	由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，
把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。
	当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。
为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。

三、事件驱动event-driven

	在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，
但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，
这种处理机制，称为“事件环”机制。


单线程，单线程的好处，减少了内存开销，操作系统的内存换页。
如果某一个事情，进入了，但是被I/O阻塞了，所以这个线程就阻塞了。


非阻塞I/O， 不会傻等I/O语句结束，而会执行后面的语句。


事件机制，事件环，不管是新用户的请求，还是老用户的I/O完成，都将以事件方式加入事件环，等待调度。


单线程的弱点：

1.无法利用多核CPU 
2.一个用户造成线程奔溃，整个服务都奔溃 
3.大量计算占用CPU导致无法继续调用异步I/O


单线程的优点：

1.操作系统完全不再有线程创建，销毁的时间开销 
2.减少了内存的开销，操作系统的内存换页 
3.不用像多线程编程一样处处在意状态的同步问题 
4.一个8G的内存服务器，可以同时处理超过四万用户的连接


ode.js善于I/O，擅长任务调度，不善于计算。专注于实现高性能web服务器端的开发,让javescript运行在服务端的开发平台。
node.js没有web容器。
